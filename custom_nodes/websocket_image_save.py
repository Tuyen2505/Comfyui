from PIL import Image
import numpy as np
import asyncio
import websockets
import base64
import io
import time
import json

class SaveImageWebsocket:
    @classmethod
    def INPUT_TYPES(s):
        return {
            "required": {
                "images": ("IMAGE",),
            }
        }

    RETURN_TYPES = ()
    FUNCTION = "save_images"
    OUTPUT_NODE = True
    CATEGORY = "api/image"

    async def send_to_websocket(self, image_base64):
        """ G·ª≠i ·∫£nh base64 ƒë·∫øn WebSocket server """
        ws_url = "ws://localhost:8766"
        try:
            # K·∫øt n·ªëi, g·ª≠i, r·ªìi ƒë√≥ng ngay. Kh√¥ng c·∫ßn ch·ªù ph·∫£n h·ªìi.
            async with websockets.connect(ws_url) as websocket:
                payload = {
                    # "status": "success", # Kh√¥ng th·ª±c s·ª± c·∫ßn thi·∫øt cho handle_comfyui
                    "image": image_base64,
                    # "message": "·∫¢nh t·ª´ ComfyUI" # Kh√¥ng th·ª±c s·ª± c·∫ßn thi·∫øt cho handle_comfyui
                }
                await websocket.send(json.dumps(payload))
                print(f"‚úÖ Custom node ƒë√£ g·ª≠i ·∫£nh ƒë·∫øn server 8766")
                # KH√îNG C·∫¶N `await websocket.recv()` n·ªØa
                # `async with` s·∫Ω t·ª± ƒë·ªông ƒë√≥ng websocket khi tho√°t kh·ªèi block n√†y
        except ConnectionRefusedError:
            print(f"‚ùå L·ªói k·∫øt n·ªëi WebSocket t·ª´ custom node: Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi {ws_url}. Server 8766 c√≥ ƒëang ch·∫°y kh√¥ng?")
        except Exception as e:
            print(f"‚ùå L·ªói g·ª≠i WebSocket t·ª´ custom node: {e}")

    def save_images(self, images):
        # Kh√¥ng c·∫ßn t·∫°o event loop m·ªõi m·ªói l·∫ßn n·∫øu ComfyUI ƒë√£ ch·∫°y trong m·ªôt event loop.
        # Tuy nhi√™n, custom nodes th∆∞·ªùng ch·∫°y trong thread ri√™ng, n√™n c√°ch l√†m n√†y c√≥ th·ªÉ v·∫´n c·∫ßn thi·∫øt.
        # N·∫øu ComfyUI cung c·∫•p c√°ch l·∫•y event loop hi·ªán t·∫°i, h√£y d√πng n√≥.
        try:
            loop = asyncio.get_event_loop()
            if loop.is_closed(): # N·∫øu loop ƒë√£ ƒë√≥ng, t·∫°o loop m·ªõi
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
        except RuntimeError: # N·∫øu kh√¥ng c√≥ event loop n√†o ƒë∆∞·ª£c set cho thread n√†y
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)


        for image_idx, image in enumerate(images):
            i = 255.0 * image.cpu().numpy()
            img = Image.fromarray(np.clip(i, 0, 255).astype(np.uint8))

            buffered = io.BytesIO()
            img.save(buffered, format="PNG")
            img_base64 = base64.b64encode(buffered.getvalue()).decode("utf-8")

            print(f"üñºÔ∏è Custom node ƒëang chu·∫©n b·ªã g·ª≠i ·∫£nh {image_idx + 1}/{len(images)}")
            # G·ª≠i ·∫£nh qua WebSocket
            loop.run_until_complete(self.send_to_websocket(img_base64))

        return {}

    @classmethod
    def IS_CHANGED(s, images):
        return time.time()


NODE_CLASS_MAPPINGS = {
    "SaveImageWebsocket": SaveImageWebsocket,
}
